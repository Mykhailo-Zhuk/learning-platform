{
  "html_syntax": {
    "subtitle": "Синтаксис HTML, структурованість",
    "content": [
      "HTML (від англ. HyperText Markup Language — \"мова гіпертекстової розмітки\") — стандартизована мова розмітки документів у Всесвітній павутині",
      {
        "image": {
          "src": "https://res.cloudinary.com/dxcpen44g/image/upload/f_auto,q_auto/v1/learning-platform/html_css/nlnzya944i8pzwhr7etq",
          "caption": []
        }
      },
      "<назва тегу>Тут йде зміст...</назва тегу>",
      "<!-- Напишить свій коментар тут -->"
    ]
  },
  "html_semantics": {
    "subtitle": "Семантика",
    "content": [
      "Семантика - це вивчення значень слів і фраз в мові.",
      "Семантичні елементи = елементи зі смислом.",
      "Семантичний елемент чітко описує його значення як для браузера, так і для розробника.",
      "HTML елемент <head> - є контейнером для метаданих (дані про дані) і де розміщуються наступні елементи: <title>, <style>, <meta>, <link>, <script>, <base>, <noscript>, <template>.",
      "Зарезервовані символи в HTML мають бути замінені символьними об’єктами (або сутностями).",
      {
        "image": {
          "src": "https://w3schoolsua.github.io/images/img_sem_elements.gif",
          "caption": [
            "HTML пропонує кілька семантичних елемента, які визначають різні частини вебсторінки",
            "<header> - Визначає заголовок для документа або розділу",
            "<nav> - Визначає контейнер для посилань навігації",
            "<section> - Визначає розділ в документі",
            "<article> - Визначає незалежну автономну статтю",
            "<aside> - Визначає контент окрім основного контента (наприклад, бокову панель)",
            "<footer> - Визначає нижній колонтитул (footer) для документа або розділу",
            "<details> - Визначає додаткові деталі",
            "<summary> - Визначає заголовок для елемента <details>",
            "<time> - Визначає дату/час",
            "<figcaption>, <figure> - Призначення підпису до малюнка - додати візуальне пояснення до зображення.",
            "<main> - Визначає основний зміст документа",
            "<mark> - Визначає помічений / виділений текст"
          ]
        }
      }
    ]
  },
  "html_tags": {
    "subtitle": "Теги HTML",
    "content": [
      "Щоб показати відео в HTML, використовуйте елемент <video>. Атрибут controls додає елементи керування відео, такі як відтворення, призупинення та рівень звуку. Рекомендується завжди включати атрибути width та height. Якщо height (висота) та width (ширина) не задані, сторінка може мерехтіти при програванні відео. Елемент <source> дозволяє вказувати альтернативні відео, з яких браузер може вибирати. Браузер використовуватиме перший розпізнаний формат. Текст між тегами <video> та </video> буде відображатися лише у браузерах, які не підтримують елемент <video>",
      "Щоб відтворити аудіофайл в HTML, використовуйте елемент <audio>. Атрибут controls додає елементи управління звуком, такі як програвання, пауза і гучність. Елемент <source> дозволяє вказати альтернативні аудіофайли, з яких браузер може обирати. Браузер буде використовувати перший розпізнаний формат. Текст між <audio> і </audio> тегами буде відображатися лише в браузерах, які не підтримують елемент <audio>.",
      "<h1>Це заголовок 1</h1>;",
      "<p>Це параграф.</p>;",
      "<a href=\"лінк\">Це посилання</a>;",
      "<img src=\"лінк на картинку\" alt=\"альтернативний текст\" width=\"104\" height=\"142\">;",
      "<button>Натисніть мене</button>;",
      "<ul> (невпорядкований / маркований список)\n   <li>Кава</li>\n    <li>Чай</li>\n    <li>Молоко</li>\n </ul>;",
      "<ol> (упорядкований / нумерований список)\n    <li>Кава</li>\n    <li>Чай</li>\n    <li>Молоко</li>\n </ol>;"
    ]
  },
  "html_atributes": {
    "subtitle": "Атрибути HTML",
    "content": [
      "Всі HTML елементи можуть мати атрибути;",
      "Атрибути надають додаткову інформацію про елемент;",
      "Атрибути завжди вказуються в початковому тезі;",
      "Атрибути зазвичай входять в пари ім\"я/значення, наприклад: ім\"я=\"значення\";",
      "Найчастіше використовуються: alt (Визначає альтернативний текст для зображення, коли зображення не може бути відображене), disabled (Вказує, що вхідний елемент повинен бути відключений), href (Вказує URL-адресу (веб-адресу) для посилання), id (Вказує унікальний ідентифікатор елемента), src (Вказує URL-адресу (веб-адресу) зображення), style (Визначає вбудований CSS стиль для елемента, <tagname style=\"property:value;\">), title (Визначає додаткову інформацію про елемент (відображається як підказка));",
      "Атрибут target (тега <a>) вказує, де відкрити пов\"язаний документ;",
      "Атрибут target може мати одне із наступних значень:",
      "_blank - Відкриває пов\"язаний документ в новому вікні або вкладці;",
      "_self - Відкриває пов\"язаний документ в тому ж вікні / вкладці, в якому він був натиснутий (за замовчуванням);",
      "_parent - Відкриває пов\"язаний документ в батьківському фреймі;",
      "_top - Відкриває пов\"язаний документ в повному тілі вікна;",
      "framename - Відкриває пов\"язаний документ в названому фреймі;",
      "Елементи форматування були розроблені для відображення спеціальних типів тексту:",
      "<b> - Жирний текст;",
      "<strong> - Важливий текст (виділяється жирним);",
      "<i> - Курсивний текст;",
      "<em> - Важливий текст (виділяється курсивом);",
      "<mark> - Помічений (маркований) текст;",
      "<small> - Маленький текст;",
      "<del> - Видалений текст;",
      "<ins> - Вставлений текст;",
      "<sub> - Підрядковий текст (нижній індекс);",
      "<sup> - Надрядковий текст (верхній індекс);"
    ]
  },
  "css": {
    "subtitle": "CSS",
    "content": [
      "CSS розшифровується як Cascading Style Sheets - каскадні таблиці стилів. CSS - це мова, яка описує стиль HTML документа.  описує, як повинні відображатися  елементи. Синтаксис: p { color: red; text-align: center; }",
      "Буде краще згрупувати селектори, щоб мінімізувати код. Щоб згрупувати селектори, розділяйте кожен селектор комою.",
      {
        "table": {
          "title": "Таблиця селекторів: ",
          "headers": ["Селектор", "Приклад", "Опис"],
          "rows": [
            {
              "id": 1,
              "item": ".class",
              "example": ".intro",
              "description": "Обирає всі елементи з class=\"intro\""
            },
            {
              "id": 2,
              "item": "#id",
              "example": "#firstname",
              "description": "Обирає елемент з id=\"firstname\""
            },
            {
              "id": 3,
              "item": "*",
              "example": "*",
              "description": "Обирає всі елементи на сторінці"
            },
            {
              "id": 4,
              "item": "element",
              "example": "p",
              "description": "Обирає всі елементи <p>"
            },
            {
              "id": 5,
              "item": "element,element,..",
              "example": "div, p",
              "description": "Обирає всі елементи <div> та всі елементи <p>"
            }
          ]
        }
      },
      "Як підключити: <link rel=\"stylesheet\" href=\"mystyle.css\"> в header html файлу",
      {
        "list": {
          "title": "CSS можна додати до елементів HTML трьома способами:",
          "items": [
            {
              "id": 1,
              "item": "Inline (вбудований або рядковий) - використовуючи атрибут style в HTML елементах"
            },
            {
              "id": 2,
              "item": "Internal (внутрішній) - використовуючи елемент <style> в разділі <head>"
            },
            {
              "id": 3,
              "item": "External (зовнішній) - за допомогою зовнішнього файлу CSS"
            }
          ]
        }
      },
      "Вбудований стиль має найвищий пріоритет та перевизначає зовнішні та внутрішні стилі й налаштування браузера за замовчуванням.",
      {
        "image": {
          "src": "https://html-plus.in.ua/wp-content/uploads/2017/04/box-model.jpg",
          "caption": []
        }
      },
      "Часто використовувані сластивості CSS:",
      {
        "list": [
          {
            "id": 1,
            "item": "color для установки кольору тексту"
          },
          {
            "id": 2,
            "item": "font-family для установки сімейства шрифтів тексту"
          },
          {
            "id": 3,
            "item": "font-size для установки розміру тексту"
          },
          {
            "id": 4,
            "item": "border для установки меж єлементів"
          },
          {
            "id": 5,
            "item": "padding для установки відступу всередині меж"
          },
          {
            "id": 6,
            "item": "margin для установки відступу поза межами (margin: 25px 50px 75px 100px; (верхнє поле 25px, праве поле 50px, нижнє поле 75px, ліве поле 100px))"
          }
        ]
      },
      "a { color: pink; }. Чотири стани посилань: a:link - звичайне, не відвідуване посилання, a:visited - посилання, яке вже відвідав користувач, a:hover - посилання, коли користувач наводить на нього курсор миші, a:active - посилання в той момент, коли воно натиснуте (активне). Властивість {text-decoration: none; }  в основному використовується для видалення підкреслень із посилань. ",
      "Властивість list-style-type визначає тип маркера елемента списку. Властивість list-style-image визначає зображення як маркер елемента списку. Властивість list-style-position визначає положення маркерів елемента списку (марковані пункти).",
      "Властивість display визначає, як елемент відображається. Кожен елемент HTML має значення, що відображається за замовчуванням в залежності від типу елемента. Значенням за замовчуванням для більшості елементів є block або inline. display: none; зазвичай використовується з JavaScript для приховування та відображення елементів без їх видалення та повторного створення.",
      "Властивість position визначає тип метода позиціонування, що використовується для елемента. Є п’ять різних значень position (позиції): static - статичний (позиціонується відповідно до звичайного потоку сторінки), relative - відносний (позиціонується відносно свого нормального положення), fixed - фіксований (позиціонується відносно області перегляду, що означає, що він завжди залишається на тому самому місці), absolute - абсолютний (позиціонується відносно найближчого позиціонованого предка (замість позиціонування відносно вікна перегляду, як фіксований), \"позиціонований\" елемент - це той, чия позиція що завгодно, крім static), sticky - закріплений (позиціонується на основі позиції прокрутки користувача).",
      "Властивість z-index визначає порядок стека елемента (який елемент має бути розташований попереду або позаду інших, тобто, який елемент перекриває інший).",
      "bottom (визначає нижній край поля для позиціонованого блоку), clip (закріплює абсолютно позиціонований елемент), left (визначає край лівого поля для позиціонованого блоку), right (визначає правий край поля для позиціонованого блоку), top (визначає верхній край поля для позиціонованого блоку).",
      "Властивість overflow вказує, чи слід обрізати зміст або додавати смуги прокрутки, якщо зміст елемента занадто великий, щоб поміститись у вказаній області. Наприклад, якщо текст не поміщається в блочний елемент <div>. Властивість overflow має наступні значення: visible - За замовчуванням. Переповнення не обрізується. Контент відображається поза полем елемента. hidden - Переповнення обрізається (приховується), а інша частина змісту буде невидимою. scroll - Переповнення обрізається, і додається смуга прокрутки, щоб побачити іншу частину змісту. auto - Аналогічно scroll, але додає смуги прокрутки лише при необхідності. Властивість overflow працює лише для блочних елементів зі вказаною висотою.",
      "Властивість float використовується для позиціонування та форматування змісту, наприклад, коли зображення розташовується зліва від тексту в контейнері. Властивість float може мати одне із наступних значень: left - Елемент плаває зліва від свого контейнера. right - Елемент плаває справа від свого контейнера. none - Елемент не плаває (буде відображатися саме там, де він зустрічається в тексті). Це за замовчуванням. inherit - Елемент наслідує float-значення свого предка.",
      "В HTML колір можна вказати як RGB значення, використовуючи цю формулу: \"rgb(red, green, blue)\" (Кожний параметр (red, green та blue) визначає інтенсивність кольору від 0 до 255.)",
      "В HTML колір можна вказати, використовуючи шістнадцяткове (HEX) значення в формі: \"#rrggbb\" де rr (red), gg (green) та bb (blue) шістнадцяткові значення від 00 до ff (такі ж, як десяткові 0-255).",
      "В HTML колір можна вказати за допомогою відтінку (hue), насиченості (saturation) і яскравості (lightness) - HSL значення в формі: \"hsl(hue, saturation, lightness)\". Відтінок (hue) - це градус колірного кола від 0 до 360. 0 - червоний, 120 - зелений, 240 - синій. Насиченість (saturation) - це процентне значення, 0% означає відтінок сірого, а 100% - це повний колір. Яскравість (lightness) також в процентах, 0% - чорний, 50% - ні світлий, ні темний, 100% - білий.",
      "Кольорові значення RGBA є розширенням кольорових значень RGB з альфа-каналом, який визначає непрозорість для кольору. Значення кольору RGBA вказується за допомогою: \"rgba(red, green, blue, alpha)\". Альфа-параметр - це число від 0,0 (повністю прозоре) до 1,0 (зовсім не прозоре)",
      "Кольорові значення HSLA є розширенням значень кольору HSL з альфа-каналом, який визначає непрозорість для кольору. Значення кольору HSLA задається за допомогою: \"hsla(hue, saturation, lightness, alpha)\". Альфа-параметр - це число від 0,0 (повністю прозоре) до 1,0 (зовсім не прозоре).",
      "Властивість opacity може приймати значення від 0,0 до 1,0. Чим нижче значення, тим прозоріше.",
      "Одиниці абсолютної довжини є фіксованими, і довжина, виражена в будь-якій із них, буде відображатися саме як фіксований розмір.",
      "Абсолютні одиниці довжини не рекомендуються для використання виведення зображення на екрані, тому що розміри екранів різних пристроїв можуть сильно відрізнятися. Однак їх можна використовувати, якщо відомий вихідний носій, наприклад, для друкованого макета (сторінки для друку).",
      {
        "table": {
          "title": "Таблиця абсолютних довжин: ",
          "headers": ["Одиниця", "Опис"],
          "rows": [
            {
              "id": 1,
              "item": "cm",
              "description": "сантиметри"
            },
            {
              "id": 2,
              "item": "mm",
              "description": "міліметри"
            },
            {
              "id": 3,
              "item": "in",
              "description": "дюйми (1 дюйм = 96px = 2.54см)"
            },
            {
              "id": 4,
              "item": "px *",
              "description": "пікселі (1px = 1/96th в 1)"
            },
            {
              "id": 5,
              "item": "pt",
              "description": "точки (1pt = 1/72 в 1)"
            },
            {
              "id": 6,
              "item": "pc",
              "description": "picas (1pc = 12 pt)"
            }
          ]
        }
      },
      "Одиниці відносної довжини визначають довжину відносного іншої властивості довжини. Відносні одиниці довжини краще масштабуються між різними середовищами рендерингу (виведення на екран).",
      {
        "table": {
          "title": "Таблиця відносних довжин: ",
          "headers": ["Одиниця", "Опис"],
          "rows": [
            {
              "id": 1,
              "item": "em",
              "description": "Відносно розміру шрифту елемента (2em означає 2-разовий розмір поточного шрифту)"
            },
            {
              "id": 2,
              "item": "ex",
              "description": "Відносно x-висоти поточного шрифту (рідко використовується)"
            },
            {
              "id": 3,
              "item": "ch",
              "description": "Відносно ширини \"0\" (нуля)"
            },
            {
              "id": 4,
              "item": "rem",
              "description": "Відносно розміру шрифту кореневого елементу"
            },
            {
              "id": 5,
              "item": "vw",
              "description": "Відносно 1% ширини області перегляду*"
            },
            {
              "id": 6,
              "item": "vh",
              "description": "Відносно 1% висоти області перегляду*"
            },
            {
              "id": 7,
              "item": "vmin",
              "description": "Відносно 1% меншого розміру області перегляду*"
            },
            {
              "id": 8,
              "item": "vmax",
              "description": "Відносно 1% більшого розміру області перегляду*"
            },
            {
              "id": 9,
              "item": "%",
              "description": "Відносно батьківського елемента"
            }
          ]
        }
      }
    ]
  },
  "css_identifier": {
    "subtitle": "Iдентифікатори",
    "content": [
      "Атрибут id визначає унікальний ідентифікатор елемента HTML. Значення атрибута id має бути унікальним в HTML документі;",
      "Синтаксис для id такий: напишіть хеш-символ (#), за яким слідує ім\"я id. Потім визначте властивості CSS у фігурних дужках {};",
      "Як створити закладку з атрибутом id:",
      "<h2 id=\"C4\">Розділ 4</h2>;",
      "Потім додайте посилання на закладку (\"Перейти до розділу 4\") на тій самій сторінці:",
      "<a href=\"#C4\">Перейти до розділу 4</a>"
    ]
  },
  "css_classes": {
    "subtitle": "Класи",
    "content": [
      "HTML атрибут class використовується для визначення класу для HTML елемента;",
      "Кілька елементів HTML можуть спільно використовувати один і той же клас;",
      "Елементи HTML можуть належати більше ніж одному класу;",
      "Щоб визначити кілька класів, відокремте назви класів пробілом, напр. <div class=\"city main\">. Елемент буде стилізований відповідно до всіх вказаних класів;"
    ]
  },
  "css_bem": {
    "subtitle": "Методологія \"BЕМ\"",
    "content": [
      "BEM: BEM (Block-Element-Modifier) - це методологія іменування класів у HTML і CSS, яка допомагає створювати чіткий, зручний і прогнозований код для фронт-енд розробки.",
      "Блоки (Blocks): Блоки визначаються як самодостатні структурні одиниці на сторінці. Це може бути будь-який окремий елемент, такий як заголовок, меню або форма.",
      "Елементи (Elements): Елементи є частинами блоків, які не мають самостійного значення поза цим блоком. Вони пов\"язані з конкретним блоком і не повинні використовуватися самостійно",
      "Модифікатори (Modifiers): Модифікатори допомагають змінювати вигляд блоків або елементів. Вони дозволяють створювати змінені версії блоків або елементів без необхідності дублювання коду.",
      "Методологія неймінгу: Це система іменування класів, яка використовує подвійні риски (__), щоб вказати ієрархію між блоками, елементами та модифікаторами. Наприклад, .блок__елемент--модифікатор.",
      "Підхід до CSS: Використання методології БЕМ допомагає уникнути проблем зі спадкоємністю та конфліктами в CSS, оскільки кожен блок, елемент і модифікатор має свій власний унікальний клас.",
      "Читабельність коду: БЕМ сприяє поліпшенню читабельності коду та полегшенню розуміння структури сторінки для інших розробників, які можуть працювати над проектом у майбутньому.",
      "Підтримка масштабування: Методологія БЕМ сприяє легкому масштабуванню проектів, оскільки дозволяє створювати інтерфейси зі збалансованою структурою, що спрощує додавання та зміну функціональності.",
      "Спільна робота: Використання методології БЕМ сприяє спільній роботі багатьох розробників над проектом, оскільки вона забезпечує стандартизовану систему іменування, що полегшує співпрацю.",
      {
        "image": {
          "src": "https://res.cloudinary.com/dxcpen44g/image/upload/f_auto,q_auto/v1/learning-platform/html_css/l9zgjctgixkq2sfxwzgf",
          "caption": []
        }
      }
    ]
  },
  "css_selectors": {
    "subtitle": "Селектори",
    "content": [
      "CSS селектори використовуються для пошуку (або вибору) HTML-елементів, які ви хочете стилізувати;",
      "Можна розділити CSS селектори на п’ять категорій:",
      "- Прості селектори (вибір елементів на основі імені, ідентифікатору, класу);",
      "- Комбінаторні селектори (вибір елементів на основі визначених відношень між ними);",
      "- Селектори псевдокласів (вибір елементів на основі визначеного стану);",
      "- Селектори псевдоелементів (вибір і стилізація частини елемента);",
      "- Селектори атрибутів (вибір елементів на основі атрибуту або значення атрибуту);",
      "Якщо ви використовуєте правило !important, воно перевизначить ВСІ попередні правила стилізації для конкретної властивості даного елементу!",
      {
        "table": {
          "title": "Всі CSS селектори атрибутів",
          "headers": ["Селектор", "Приклад", "Опис"],
          "rows": [
            {
              "id": 1,
              "item": "[attribute]",
              "example": "[target]",
              "description": "Обирає всі елементи з атрибутом target"
            },
            {
              "id": 2,
              "item": "[attribute=value]",
              "example": "[target=_blank]",
              "description": "Обирає всі елементи з target=\"_blank\""
            },
            {
              "id": 3,
              "item": "[attribute~=value]",
              "example": "[title~=flower]",
              "description": "Обирає всі елементи з атрибутом title, що містить слово \"flower\""
            },
            {
              "id": 4,
              "item": "[attribute|=value]",
              "example": "[lang|=en]",
              "description": "Обирає всі елементи зі значенням атрибута lang, що починається з \"en\""
            },
            {
              "id": 5,
              "item": "[attribute^=value]",
              "example": "a[href^=\"https\"]",
              "description": "Обирає кожен елемент <a>, значення атрибута href якого починається з \"https\""
            },
            {
              "id": 6,
              "item": "[attribute$=value]",
              "example": "a[href$=\".pdf\"]",
              "description": "Обирає кожен елемент <a>, значення атрибута href якого закінчується на \".pdf\""
            },
            {
              "id": 7,
              "item": "[attribute*=value]",
              "example": "a[href*=\"w3schools\"]",
              "description": "Обирає кожен елемент <a>, значення атрибута href якого містить підрядок \"w3schools\""
            }
          ]
        }
      }
    ]
  },
  "css_combinator": {
    "subtitle": "Комбінатори",
    "content": [
      "Комбінатор - це те, що пояснює взаємозв’язок між селекторами.",
      {
        "table": {
          "title": "В CSS є чотири різних комбінатора:",
          "headers": ["Селектор", "Приклад", "Опис"],
          "rows": [
            {
              "id": 1,
              "item": "елемент елемент",
              "example": "div p",
              "description": "Обирає всі елементи <p> всередині елемента <div>"
            },
            {
              "id": 2,
              "item": "елемент>елемент",
              "example": "div > p",
              "description": "Обирає всі елементи <p> у яких батьківський елемент <div>"
            },
            {
              "id": 3,
              "item": "елемент+елемент",
              "example": "div + p",
              "description": "Обирає перший елемент <p>, який розміщується відразу після елемента <div>"
            },
            {
              "id": 4,
              "item": "елемент1~елемент2",
              "example": "p ~ ul",
              "description": "Обирає кожен елемент <ul>, якому передує елемент <p>"
            }
          ]
        }
      }
    ]
  },
  "css_preudo_classes": {
    "subtitle": "Псевдокласи",
    "content": [
      "Псевдо-клас використовується для визначення особливого стану елемента.",
      "Наприклад, його можна використовувати для:",
      "Стилізації елемента, коли користувач наводить на нього курсор",
      "Стилізації відвіданих та невідвіданих посилань по-різному",
      "Стилізації елемента, коли він знаходиться в фокусі",
      {
        "table": {
          "title": "Типу псевдо-класів:",
          "headers": ["Селектор", "Приклад", "Опис"],
          "rows": [
            {
              "id": 1,
              "item": ":active",
              "example": "a:active",
              "description": "Обирає активне посилання"
            },
            {
              "id": 2,
              "item": ":checked",
              "example": "input:checked",
              "description": "Обирає кожен перевірений елемент <input>"
            },
            {
              "id": 3,
              "item": ":disabled",
              "example": "input:disabled",
              "description": "Обирає кожен відключений елемент <input>"
            },
            {
              "id": 4,
              "item": ":enabled",
              "example": "input:enabled",
              "description": "Обирає кожен включений елемент <input>"
            },
            {
              "id": 5,
              "item": ":first-child",
              "example": "p:first-child",
              "description": "Обирає всі елементи <p>, які є першим нащадком свого предка"
            },
            {
              "id": 6,
              "item": ":first-of-type",
              "example": "p:first-of-type",
              "description": "Обирає кожен елемент <p> який є першим елементом <p> свого предка"
            },
            {
              "id": 7,
              "item": ":focus",
              "example": "input:focus",
              "description": "Обирає елемент <input> який має фокус"
            },
            {
              "id": 8,
              "item": ":hover",
              "example": "a:hover",
              "description": "Обирає посилання при наведенні миші"
            },
            {
              "id": 9,
              "item": ":in-range",
              "example": "input:in-range",
              "description": "Обирає елементи <input> зі значенням у визначеному діапазоні"
            },
            {
              "id": 10,
              "item": ":invalid",
              "example": "input:invalid",
              "description": "Обирає всі елементи <input> з неприпустимим значенням"
            },
            {
              "id": 11,
              "item": ":lang(language)",
              "example": "p:lang(it)",
              "description": "Обирає кожен елемент <p> зі значенням атрибута lang, що починається з \"it\""
            },
            {
              "id": 12,
              "item": ":last-child",
              "example": "p:last-child",
              "description": "Обирає всі елементи <p>, які є останнім дочірнім елементом свого предка"
            },
            {
              "id": 13,
              "item": ":last-of-type",
              "example": "p:last-of-type",
              "description": "Обирає кожен елемент <p>, який є останнім елементом <p> свого предка"
            },
            {
              "id": 14,
              "item": ":link",
              "example": "a:link",
              "description": "Обирає всі не відвідувані посилання"
            },
            {
              "id": 15,
              "item": ":not(selector)",
              "example": ":not(p)",
              "description": "Обирає кожен елемент, який не є елементом <p>"
            },
            {
              "id": 16,
              "item": ":nth-child(n)",
              "example": "p:nth-child(2)",
              "description": "Обирає кожен елемент <p>, який є другим дочірнім елементом свого предка"
            },
            {
              "id": 17,
              "item": ":nth-last-child(n)",
              "example": "p:nth-last-child(2)",
              "description": "Обирає кожен елемент <p>, який є другим дочірнім елементом свого предка, рахуючи від останнього дочірнього елемента"
            },
            {
              "id": 18,
              "item": ":nth-last-of-type(n)",
              "example": "p:nth-last-of-type(2)",
              "description": "Обирає кожен елемент <p>, який є другим елементом <p> свого предка, рахуючи від останнього нащадка"
            },
            {
              "id": 19,
              "item": ":nth-of-type(n)",
              "example": "p:nth-of-type(2)",
              "description": "Обирає кожен елемент <p> який є другим елементом <p> свого предка"
            },
            {
              "id": 20,
              "item": ":only-of-type",
              "example": "p:only-of-type",
              "description": "Обирає кожен елемент <p> який є єдиним елементом <p> свого предка"
            },
            {
              "id": 21,
              "item": ":only-child",
              "example": "p:only-child",
              "description": "Обирає кожен елемент <p> який є єдиним потомком свого предка"
            },
            {
              "id": 22,
              "item": ":optional",
              "example": "input:optional",
              "description": "Обирає елементи <input> без атрибута \"required\""
            },
            {
              "id": 23,
              "item": ":out-of-range",
              "example": "input:out-of-range",
              "description": "Обирає елементи <input> зі значенням поза вказаного діапазону"
            },
            {
              "id": 24,
              "item": ":read-only",
              "example": "input:read-only",
              "description": "Обирає елементи <input> зі вказаним атрибутом \"readonly\""
            },
            {
              "id": 25,
              "item": ":read-write",
              "example": "input:read-write",
              "description": "Обирає елементи <input> без атрибута \"readonly\""
            },
            {
              "id": 26,
              "item": ":required",
              "example": "input:required",
              "description": "Обирає елементи <input> зі вказаним атрибутом \"required\""
            },
            {
              "id": 27,
              "item": ":root",
              "example": "root",
              "description": "Обирає кореневий елемент документа"
            },
            {
              "id": 28,
              "item": ":target",
              "example": "#news:target",
              "description": "Обирає поточний активний елемент #news (при натисканні на URL, що містить це ім’я якоря)"
            },
            {
              "id": 29,
              "item": ":valid",
              "example": "input:valid",
              "description": "Обирає всі елементи <input> с допустимим значенням"
            },
            {
              "id": 30,
              "item": ":visited",
              "example": "a:visited",
              "description": "Обирає всі відвідані посилання"
            }
          ]
        }
      }
    ]
  },
  "css_pseudo_elements": {
    "subtitle": "Псевдоелементи",
    "content": [
      "CSS псевдо-елемент використовується для стилізації визначених частин елемента.",
      {
        "list": {
          "title": "Наприклад, його можна використовувати для:",
          "items": [
            "Стилізації першої літери або рядка елемента",
            "Вставки змісту до або після змісту елемента"
          ]
        }
      },
      {
        "table": {
          "headers": ["Селектор", "Приклад", "Опис"],
          "rows": [
            {
              "id": 1,
              "item": "::after",
              "example": "p::after",
              "description": "Вставляє контент після кожного елемента <p>"
            },
            {
              "id": 2,
              "item": "::before",
              "example": "p::before",
              "description": "Вставляє контент перед кожним елементом <p>"
            },
            {
              "id": 3,
              "item": "::first-letter",
              "example": "p::first-letter",
              "description": "Обирає першу літеру кожного елемента <p>"
            },
            {
              "id": 4,
              "item": "::first-line",
              "example": "p::first-line",
              "description": "Обирає перший рядок кожного елемента <p>"
            },
            {
              "id": 5,
              "item": "::selection",
              "example": "p::selection",
              "description": "Обирає частину елемента, яка обрана користувачем"
            }
          ]
        }
      }
    ]
  },
  "css_variables": {
    "subtitle": "Змінні у CSS",
    "content": [
      "Функція var() використовується для вставки значення CSS змінної.",
      "var(ім’я, значення)",
      {
        "table": {
          "headers": ["Значення", "", "Опис"],
          "rows": [
            {
              "id": 1,
              "item": "ім’я",
              "example": "",
              "description": "Обов’язково. Ім’я змінній (має починатися з двох тире)"
            },
            {
              "id": 2,
              "item": "значення",
              "example": "",
              "description": "Не обов’язково. Резервне значення (використовується, якщо змінна не знайдена)"
            }
          ]
        }
      },
      "Щоб створити змінну з глобальною областю видимості, оголосіть її всередині селектора :root. Селектор :root відповідає кореневому елементу документа.",
      "Щоб створити змінну з локальною областю видимості, оголосіть її всередині селектора, який буде її використовувати.",
      "Для того щоб перевизначити змінну потрібно повторно оголосити змінну --blue всередині селектора. Тоді локальна змінна --blue перевизначає глобальну змінну   --blue"
    ]
  },
  "css_flex": {
    "subtitle": "Flex",
    "content": [
      {
        "table": {
          "title": "Гнучкий (flex) контейнер стає гнучким, якщо для властивості display встановлено значення flex",
          "headers": ["Властивості", "Опис"],
          "row": [
            {
              "id": 1,
              "item": "align-content",
              "example": "",
              "description": "Змінює поведінку властивості flex-wrap. Це схоже на align-items, але замість вирівнювання гнучких елементів це вирівнює гнучкі лінії"
            },
            {
              "id": 2,
              "item": "align-items",
              "example": "",
              "description": "Вертикальне вирівнювання гнучких елементів, коли елементи не використовують весь доступний простір на поперечній осі"
            },
            {
              "id": 3,
              "item": "display",
              "example": "",
              "description": "Визначає тип поля, що використовується для елемента HTML"
            },
            {
              "id": 4,
              "item": "flex-direction",
              "example": "",
              "description": "Задає напрямок гнучких елементів всередині гнучкого контейнера"
            },
            {
              "id": 5,
              "item": "flex-wrap",
              "example": "",
              "description": "Визначає, чи мають гнучкі елементи обертатися, чи ні, якщо для них недостатньо місця на одній гнучкій лінії"
            },
            {
              "id": 6,
              "item": "justify-content",
              "example": "",
              "description": "Горизонтально вирівнює гнучкі елементи, коли елементи не використовують весь доступний простір на головній осі"
            },
            {
              "id": 7,
              "item": "align-self",
              "example": "",
              "description": "Визначає вирівнювання для гнучкого елемента (перевизначає властивість гнучкого контейнера align-items)"
            },
            {
              "id": 8,
              "item": "flex",
              "example": "",
              "description": "Скорочена властивість для властивостей flex-grow, flex-shrink та flex-base"
            },
            {
              "id": 9,
              "item": "flex-basis",
              "example": "",
              "description": "Визначає початкову довжину гнучкого елемента"
            },
            {
              "id": 10,
              "item": "flex-grow",
              "example": "",
              "description": "Визначає, наскільки гнучкий елемент буде збільшуватись відносно інших гнучких елементів в тому самому контейнері"
            },
            {
              "id": 11,
              "item": "flex-shrink",
              "example": "",
              "description": "Визначає, наскільки гнучкий елемент буде стискатися в порівнянні з іншими гнучкими елементами в тому самому контейнері"
            },
            {
              "id": 12,
              "item": "order",
              "example": "",
              "description": "Визначає порядок гнучких елементів в одному контейнері"
            }
          ]
        }
      }
    ]
  },
  "css_grid": {
    "subtitle": "Grid",
    "content": [
      "Елемент HTML стає контейнером сітки, якщо його властивість display має значення grid або inline-grid. Вертикальні лінії елементів сітки називаються стовпцями. Горизонтальні лінії елементів сітки називаються рядками. Місце між кожним стовпцем/рядком називається проміжками.",
      {
        "table": {
          "headers": ["Властивості", "Опис"],
          "rows": [
            {
              "id": 1,
              "item": "column-gap",
              "example": "",
              "description": "Визначає проміжок між колонками"
            },
            {
              "id": 2,
              "item": "gap",
              "example": "",
              "description": "Скорочена властивість для властивостей row-gap та column-gap"
            },
            {
              "id": 3,
              "item": "grid",
              "example": "",
              "description": "Скорочена властивість для властивостей grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns та grid-auto -flow"
            },
            {
              "id": 4,
              "item": "grid-area",
              "example": "",
              "description": "Або вказує назву для елемента grid, або ця властивість є скороченою властивістю для властивостей grid-row-start, grid-column-start, grid-row -end та grid-column-end"
            },
            {
              "id": 5,
              "item": "grid-auto-columns",
              "example": "",
              "description": "Визначає розмір стовпця за умовчанням"
            },
            {
              "id": 6,
              "item": "grid-auto-flow",
              "example": "",
              "description": "Визначає, як автоматично розміщені елементи вставляють у сітку"
            },
            {
              "id": 7,
              "item": "grid-auto-rows",
              "example": "",
              "description": "Визначає розмір рядка за умовчанням"
            },
            {
              "id": 8,
              "item": "grid-column",
              "example": "",
              "description": "Скорочена властивість для властивостей grid-column-start та grid-column-end"
            },
            {
              "id": 9,
              "item": "grid-column-end",
              "example": "",
              "description": "Визначає, де закінчувати елемент grid"
            },
            {
              "id": 10,
              "item": "grid-column-gap",
              "example": "",
              "description": "Визначає розмір проміжку між колонками"
            },
            {
              "id": 11,
              "item": "grid-column-start",
              "example": "",
              "description": "Визначає, з чого почати елемент grid"
            },
            {
              "id": 12,
              "item": "grid-gap",
              "example": "",
              "description": "Скорочена властивість для властивостей grid-row-gap та grid-column-gap"
            },
            {
              "id": 13,
              "item": "grid-row",
              "example": "",
              "description": "Скорочена властивість для властивостей grid-row-start та grid-row-end"
            },
            {
              "id": 14,
              "item": "grid-row-end",
              "example": "",
              "description": "Визначає, де закінчувати елемент grid"
            },
            {
              "id": 15,
              "item": "grid-row-gap",
              "example": "",
              "description": "Визначає розмір проміжку між рядками"
            },
            {
              "id": 16,
              "item": "grid-row-start",
              "example": "",
              "description": "Визначає, де почати елемент grid"
            },
            {
              "id": 17,
              "item": "grid-template",
              "example": "",
              "description": "Скорочена властивість для властивостей grid-template-rows, grid-template-columns та grid-areas"
            },
            {
              "id": 18,
              "item": "grid-template-areas",
              "example": "",
              "description": "Визначає спосіб відображення стовпців і рядків за допомогою іменованих елементів сітки"
            },
            {
              "id": 19,
              "item": "grid-template-columns",
              "example": "",
              "description": "Визначає розмір стовпців і кількість стовпців у макеті сітки"
            },
            {
              "id": 20,
              "item": "grid-template-rows",
              "example": "",
              "description": "Визначає розмір рядків у макеті сітки"
            },
            {
              "id": 21,
              "item": "row-gap",
              "example": "",
              "description": "Визначає проміжок між рядками сітки"
            }
          ]
        }
      },
      "Знак крапки позначає елемент сітки без імені.",
      "Щоб розмістити елемент, ви можете звернутися до номерів рядків або використати ключове слово \"span\" щоб визначити, скільки рядків охоплюватиме елемент:  .item1 { grid-row: 1 / 4; } (щоб \"item1\" починався з рядка 1 і закінчувався рядком 4); .item1 { grid-row: 1 / span 2; } (щоб \"item1\" починався з рядка 1 і охоплював 2 рядки)"
    ]
  },
  "media_queries": {
    "subtitle": "Media queries та адаптивність",
    "content": [
      {
        "list": {
          "title": "Адаптивний веб-дизайн - це використання HTML і CSS для автоматичної зміни розміру, приховування, стиснення або збільшення веб-сайту, щоб він добре виглядав на всіх пристроях (настільних комп\"ютерах, планшетах і телефонах):",
          "items": [
            {
              "id": 1,
              "item": "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">"
            },
            {
              "id": 2,
              "item": "Використання властивості max-width (ширина) у картинках <img src=\"img_girl.jpg\" style=\"max-width:100%; height:auto;\">"
            },
            {
              "id": 3,
              "item": "HTML елемент <picture> дозволяє визначати різні зображення для різних розмірів вікна браузера."
            },
            {
              "id": 4,
              "item": "Використовуйте медіа-запит, щоб додати точку переходу на 800px: @media screen and (max-width: 800px) { .left, .main, .right { width: 100%; / Ширина складає 100%, коли область перегляду складає 800 пікселів або менше */ }"
            },
            { "id": 5, "item": "Фреймворк Bootstrap або Tailwind (рекомендую);" }
          ]
        }
      },
      {
        "table": {
          "title": "- Правило \"@media\" дозволило визначати різні правила стилю для різних типів медіа. Типи медіа. \"@media not|only mediatype and (вираз) { CSS-Code; }\"",
          "headers": ["Значення", "Опис"],
          "rows": [
            {
              "id": 1,
              "item": "all",
              "example": "",
              "description": "Використовується для всіх медіа-пристроїв"
            },
            {
              "id": 2,
              "item": "print",
              "example": "",
              "description": "Використовується для принтерів"
            },
            {
              "id": 3,
              "item": "screen",
              "example": "",
              "description": "Використовується для екранів комп’ютерів, планшетів, смартфонів і т.д."
            },
            {
              "id": 4,
              "item": "speech",
              "example": "",
              "description": "Використовується для програм читання з екрану (скринрідерів), які \"читають\" сторінку вголос"
            }
          ]
        }
      }
    ]
  },
  "css_animation": {
    "subtitle": "Анімації і градієнти",
    "content": [
      "Синтаксис для градієнта:",
      "background-image: linear-gradient(direction, color-stop1, color-stop2, ...); ",
      {
        "list": {
          "title": "CSS визначає два типи градієнтів:",
          "items": [
            { "id": 1, "item": "Лінійні градієнти (йде вниз/вгору/вліво/вправо/по діагоналі/кут)" },
            { "id": 2, "item": "Радіальні градієнти (визначаються їх центром)" },
            { "id": 3, "item": "Конічні градієнти (навколо центральної точки)." }
          ]
        }
      },
      "Щоб створити ефект переходу, необхідно вказати дві речі: CSS властивість, до якої ви хочете додати ефект, тривалість ефекту",
      "Властивість transition-delay визначає затримку (в секундах) для ефекту переходу.",
      "всі властивості = скорочений варіант",
      "{ transition-property: width; transition-duration: 2s; transition-timing-function: linear; transition-delay: 1s; } = { transition: width 2s linear 1s; }",
      {
        "table": {
          "headers": ["Властивості", "Опис"],
          "rows": [
            {
              "id": 1,
              "item": "transition",
              "example": "",
              "description": "Скорочена властивість для встановлення чотирьох властивостей переходу в одну властивість"
            },
            {
              "id": 2,
              "item": "transition-delay",
              "example": "",
              "description": "Визначає затримку (в секундах) для ефекту переходу"
            },
            {
              "id": 3,
              "item": "transition-duration",
              "example": "",
              "description": "Визначає, скільки секунд або мілісекунд потрібно ефекту переходу для завершення"
            },
            {
              "id": 4,
              "item": "transition-property",
              "example": "",
              "description": "Визначає ім’я CSS властивості, для якої призначено ефект переходу"
            },
            {
              "id": 5,
              "item": "transition-timing-function",
              "example": "",
              "description": "Визначає криву швидкості ефекту переходу"
            }
          ]
        }
      },
      "Анімація дозволяє елементу поступово переходити від одного стилю до іншого. Щоб використовувати CSS-анімацію, спочатку необхідно вказати кілька ключових кадрів для анімації (@keyframes).",
      {
        "table": {
          "headers": ["Властивості", "Опис"],
          "rows": [
            {
              "id": 7494950593,
              "item": "@keyframes",
              "example": "",
              "description": "Визначає код анімації"
            },
            {
              "id": 6305584122,
              "item": "animation",
              "example": "",
              "description": "Скорочена властивість для встановлення всіх властивостей анімації"
            },
            {
              "id": 2937982482,
              "item": "animation-delay",
              "example": "",
              "description": "Визначає затримку початку анімації"
            },
            {
              "id": 8096153282,
              "item": "animation-direction",
              "example": "",
              "description": "Визначає, чи повинна анімація відтворюватись вперед, назад або почергово. "
            },
            {
              "id": 9435471205,
              "item": "animation-duration",
              "example": "",
              "description": "Визначає, скільки часу анімація повинна зайняти для завершення одного циклу"
            },
            {
              "id": 3321316639,
              "item": "animation-fill-mode",
              "example": "",
              "description": "Визначає стиль для елемента, коли анімація не відтворюється (до її початку, після її завершення або і того, й іншого)"
            },
            {
              "id": 4992947363,
              "item": "animation-iteration-count",
              "example": "",
              "description": "Визначає, скільки разів анімація має відтворюватись"
            },
            {
              "id": 2210262449,
              "item": "animation-name",
              "example": "",
              "description": "Визначає ім’я анімації @keyframes"
            },
            {
              "id": 2196307279,
              "item": "animation-play-state",
              "example": "",
              "description": "Визначає, чи запущена анімація або призупинена"
            },
            {
              "id": 5778636243,
              "item": "animation-timing-function",
              "example": "",
              "description": "Визначає криву швидкості анімації"
            }
          ]
        }
      },
      "Властивість transition-timing-function задає криву швидкості ефекту переходу.",
      {
        "list": {
          "itle": "Властивість transition-timer-function може мати наступні значення:",
          "items": [
            {
              "id": 6248913002,
              "item": "ease - визначає ефект переходу з повільним початком, потім швидким, а потім повільним завершенням (за замовчуванням)"
            },
            {
              "id": 4082033271,
              "item": "linear - визначає ефект переходу з однаковою швидкістю від початку до кінця"
            },
            { "id": 3649410220, "item": "ease-in - визначає ефект переходу з повільним початком" },
            {
              "id": 7868944024,
              "item": "ease-out - визначає ефект перехода з повільним закінченням"
            },
            {
              "id": 8243972631,
              "item": "ease-in-out - визначає ефект переходу з повільним початком та закінченням"
            },
            {
              "id": 1809396676,
              "item": "cubic-bezier(n,n,n,n) - дозволяє визначити свої власні значення в функції кубічного Без’є"
            }
          ]
        }
      },
      {
        "list": {
          "title": "Властивість animation-direction може мати наступні значення:",
          "items": [
            {
              "id": 2405008007,
              "item": "normal - Анімація відтворюється як завжди (вперед). Це за замовчуванням"
            },
            {
              "id": 3088298238,
              "item": "reverse - Анімація відтворюється в зворотньому напрямку (назад)"
            },
            {
              "id": 9753686665,
              "item": "alternate - Спочатку анімація відтворюється вперед, потім назад"
            },
            {
              "id": 9079138257,
              "item": "alternate-reverse - Спочатку анімація відтворюється в зворотньому напрямку, потім вперед"
            }
          ]
        }
      },
      {
        "list": {
          "title": "Властивість animation-fill-mode може мати наступні значення:",
          "items": [
            {
              "id": 8418470780,
              "item": "none - Значення за замовчуванням. Анімація не буде застосовувати які-небудь стилі до елементу до або після його виконання"
            },
            {
              "id": 9409924036,
              "item": "forwards - Елемент збереже значення стилю, встановлені останнім ключовим кадром - залежить від animation-direction (направлення анімації) та animation-iteration-count (ітеративного підрахунку анімації)"
            },
            {
              "id": 3974047319,
              "item": "backwards - Елемент отримає значення стилю, задані першим ключовим кадром - залежить від animation-direction (направлення анімації), та збереже його протягом періоду animation-delay (затримки анімації)"
            },
            {
              "id": 2321045858,
              "item": "both - Анімація буде слідувати правилам як вперед, так і назад, розширюючи властивості анімації в обох напрямках."
            }
          ]
        }
      },
      "Скорочення: \"{ animation-name: example; animation-duration: 5s; animation-timing-function: linear; animation-delay: 2s; animation-iteration-count: infinite; animation-direction: alternate; }\" = \"{ animation: example 5s linear 2s infinite alternate; }\"",
      "object-fit використовується, щоб вказати, як <img> або <video> мають бути змінені, щоб відповідати його контейнеру.",
      {
        "list": {
          "title": "Властивість object-fit може мати наступні значення:",
          "items": [
            {
              "id": 4324090099,
              "item": "fill - Це за замовчуванням. Розмір змісту, що замінюється, заповнено в полі змісту елемента. При необхідності об’єкт буде розтягнуто або здавлено, щоб відповідати"
            },
            {
              "id": 8980694324,
              "item": "contain - Замінений зміст масштабується, щоб зберегти його пропорції, в той же час вписуючись в поле змісту елемента"
            },
            {
              "id": 2255242490,
              "item": "cover - Розмір змісту, що замінюється, відповідає його пропорціям при заповненні всього поля змісту елемента. Об’єкт буде обрізано, щоб відповідати"
            },
            { "id": 9522309908, "item": "none - Замінений контент не змінюється" },
            {
              "id": 3827376532,
              "item": "scale-down - Розмір змісту визначається так, якщо б він не був вказаний або містився (що призвело б до зменшення розміру конкретного об’єкту)"
            }
          ]
        }
      },
      "Властивість object-position використовується для визначення того, як <img> або <video> мають бути розміщені в своєму контейнері.",
      "box-sizing - визначає, як розраховуються ширина та висота елемента: чи мають вони містити відступи та межі, чи ні."
    ]
  },
  "sass": {
    "subtitle": "SASS",
    "content": [
      "Sass — це препроцесор CSS.",
      "Sass зменшує повторення CSS і, отже, економить час.",
      "Змінні - це спосіб зберігати інформацію, яку ви можете знову використовувати.",
      "Визначте стандартні змінні та значення для вебсайту: \"$bgcolor: lightblue;\"",
      "Використати змінні: \"body { background-color: $bgcolor; … }\"",
      {
        "list": {
          "title": "За допомогою Sass ви можете зберігати інформацію в змінних, наприклад:",
          "items": [
            { "id": 5590027331, "item": "strings / рядки" },
            { "id": 5528971872, "item": "numbers / числа" },
            { "id": 7011237378, "item": "colors / кольори" },
            { "id": 5423376893, "item": "booleans / булеві" },
            { "id": 2607430313, "item": "lists / списки" },
            { "id": 6844022769, "item": "nulls / нулі" }
          ]
        }
      },
      "Sass використовує символ $, а потім ім’я, щоб оголосити змінну: $ім’язмінної: значення;",
      "Змінні Sass доступні лише на тому рівні, де вони визначені.",
      "!global вказує, що змінна є глобальною: $myColor: red; h1 { $myColor: green !global; color: $myColor; }",
      "Sass дозволяє вкладати селектори CSS так само, як і HTML: nav { ul { margin: 0; padding: 0; list-style: none; } }",
      "Багато властивостей CSS мають однаковий префікс, наприклад font-family, font-size і font-weight або text-align, text-transform і text-overflow. За допомогою Sass ви можете записати їх як вкладені властивості: font: { family: Helvetica, sans-serif; size: 18px; weight: bold; }",
      "Директива @import дозволяє включати вміст одного файлу в інший: @import filename; @import \"variables\";",
      "Директива CSS @import має серйозний недолік через проблеми з продуктивністю; він створює додатковий запит HTTP кожного разу, коли ви його викликаєте. Однак директива Sass @import включає файл у CSS; тому під час виконання не потрібен додатковий виклик HTTP!",
      "Sass Синтаксис партіала (Sass не буде транспілювати його): _filename;",
      "Директива @mixin дозволяє створювати CSS-код, який повторно використовуватиметься на вебсайті (може також включати інші міксини): @mixin назва { властивість: значення; властивість: значення; ... }",
      "Дефіси та підкреслення вважаються однаковими. Це означає, що important-text { } та @mixin important_text { } розглядаються як той самий міксин!",
      "Директива @include створена, щоб дозволити вам використовувати (включати) міксин: selector { @include mixin-name; } .danger { @include important-text; background-color: green; }",
      "Міксини приймають аргументи. Таким чином ви можете передати змінні до міксина: /* Визначити міксин з двома аргументами */ @mixin bordered($color, $width) { border: $width solid $color; } .myArticle { @include bordered(blue, 1px);  // Викликати міксин з двома значеннями }",
      "Можна також визначити значення за замовчуванням для змінних міксинів (тоді потрібно лише вказати значення, які змінюються, коли ви включаєте міксин): @mixin bordered($color: blue, $width: 1px) { border: $width solid $color; } .myTips { @include bordered($color: orange); }",
      "Директива @extend дозволяє поділитися набором властивостей CSS від одного селектора до іншого. Директива @extend якщо у вас є елементи з майже ідентичним стилем, які відрізняються лише деякими дрібними деталями (успадковуються): .button-report { @extend .button-basic; background-color: red; }"
    ]
  },
  "git": {
    "subtitle": "Git & GitHub",
    "content": [
      "Git і GitHub є основними інструментами для керування версіями та спільної роботи над проектами програмного забезпечення. Ось деякі ключові пункти, які вам потрібно знати про Git і GitHub:",
      {
        "list": {
          "title": "Git:",
          "items": [
            {
              "id": 1308228883,
              "item": "Git - це розподілена система керування версіями, яка дозволяє вам відстежувати зміни в файлах вашого проекту."
            },
            {
              "id": 5442501370,
              "item": "Вона дозволяє створювати гілки (branches) для розвитку різних функціональностей незалежно одна від одної."
            },
            {
              "id": 1005252831,
              "item": "Git дозволяє вам комітувати зміни (commit), що дозволяє фіксувати стан вашого проекту в певний момент часу."
            }
          ]
        }
      },
      {
        "list": {
          "title": "GitHub:",
          "items": [
            {
              "id": 2543977038,
              "item": "GitHub - це платформа для спільної роботи над проектами з використанням Git. Вона надає можливість зберігання репозиторіїв проектів та спільної роботи над ними з допомогою функціоналу, такого як Pull Requests, Issues, та Wiki."
            },
            {
              "id": 5514448189,
              "item": "GitHub надає можливість спільної роботи над відкритими джерелами та приватними проектами з використанням системи контролю версій Git."
            }
          ]
        }
      },
      {
        "list": {
          "title": "Основні поняття Git:",
          "items": [
            { "id": 4504748086, "item": "Commit - фіксація змін у репозиторії." },
            {
              "id": 7192462377,
              "item": "Branch - окрема гілка, яка дозволяє вам працювати над різними функціями незалежно."
            },
            { "id": 4330983453, "item": "Merge - об\"єднання гілок змін у одну." },
            { "id": 2249103379, "item": "Pull - отримання змін з віддаленого репозиторію." },
            { "id": 9548197076, "item": "Push - відсилання змін до віддаленого репозиторію." },
            {
              "id": 5076004844,
              "item": "Pull Request - запит на внесення змін у віддалений репозиторій."
            }
          ]
        }
      },
      {
        "list": {
          "title": "Основні команди Git:",
          "items": [
            { "id": 6783939111, "item": "git init - ініціалізує Git-репозиторій." },
            { "id": 1479455737, "item": "git add - додає файли до стадії для коміту." },
            { "id": 8276320942, "item": "git commit - фіксує зміни у репозиторії." },
            { "id": 3870858091, "item": "git push - відсилає зміни до віддаленого репозиторію." },
            { "id": 2995462456, "item": "git pull - отримує зміни з віддаленого репозиторію." },
            { "id": 9925585038, "item": "git merge - об\"єднує гілки змін у одну." }
          ]
        }
      }
    ]
  },
  "web_technology": {
    "subtitle": "Знання про веб-технології та мережу інтернет",
    "content": [
      "Знання про веб-технології та мережу Інтернет є важливими для розуміння функціонування та взаємодії різних складових сучасного цифрового світу. Ось кілька ключових аспектів, які варто вивчити:",
      {
        "list": {
          "title": "Протоколи та структура мережі Інтернет:",
          "items": [
            {
              "id": 5436274330,
              "item": "HTTP (Hypertext Transfer Protocol). Використовується для передачі веб-сторінок із сервера на клієнтський браузер. Запити (requests) включають методи, такі як GET, POST, PUT, DELETE, які взаємодіють з веб-сервером. GET — використовується для запиту на отримання ресурсів з веб-сервера. Інформація передається через URL-параметри, а відповідь сервера може бути кешована браузером. POST — використовується для відправки даних на веб-сервер для обробки. Дані передаються в тілі запиту, і цей метод часто використовується для створення або оновлення ресурсів на сервері. PUT — використовується для відправки даних на сервер з метою оновлення існуючих ресурсів. Всі дані, що відправляються, повинні повністю замінювати існуючий ресурс на сервері. DELETE — використовується для видалення ресурсів з веб-сервера. Цей метод зазвичай вимагає аутентифікації та має обмежені права доступу з міркувань безпеки. PATCH — використовується для часткового оновлення ресурсів на сервері. Цей метод дозволяє внесення змін у вже існуючі ресурси, не замінюючи їх повністю."
            },
            {
              "id": 3450657213,
              "item": "HTTPS (Hypertext Transfer Protocol Secure). Шифрована версія HTTP, яка забезпечує захищене з\"єднання між клієнтом та сервером за допомогою шифрування SSL або TLS."
            },
            {
              "id": 2150597358,
              "item": "TCP/IP (Transmission Control Protocol/Internet Protocol). Основний протокол для обміну даними в мережі Інтернет, який дозволяє ефективну передачу даних між різними комп\"ютерами. TCP забезпечує стабільне з\"єднання і передачу даних, а IP визначає маршрутизацію та доставку даних до правильного призначення."
            },
            {
              "id": 6704586820,
              "item": "DNS (Domain Name System). Використовується для перетворення доменних імен в Інтернет-адреси (IP-адреси), що дозволяє людям легко запам\"ятовувати веб-адреси, а комп\"ютерам - знаходити сервери в мережі."
            },
            {
              "id": 2264505267,
              "item": "Архітектура клієнт-сервер. Заснована на розподілі ролей між клієнтом та сервером у взаємодії. Клієнтські пристрої ініціюють запити, а сервери надають відповіді та обробляють запитання."
            },
            {
              "id": 5473020711,
              "item": "Мережеві пристрої. Маршрутизатори дозволяють передавати дані між мережами та вибирати найкоротший шлях для доставки. Комутатори встановлюють з\"єднання в мережі локального рівня та передають дані тільки до відповідних пристроїв. Мережеві хаби передають дані усім підключеним пристроям у мережі, незалежно від того, чи призначений цей трафік для них чи ні."
            }
          ]
        }
      },
      "Веб-розробка та технології =>",
      {
        "list": {
          "title": "Мови програмування для веб-розробки:",
          "items": [
            {
              "id": 6454436323,
              "item": "HTML (HyperText Markup Language): Використовується для створення структури веб-сторінок."
            },
            {
              "id": 1493265320,
              "item": "CSS (Cascading Style Sheets): Використовується для стилізації веб-сторінок, включаючи дизайн, макет, кольори тощо."
            },
            {
              "id": 9441930396,
              "item": "JavaScript: Ключова мова для динамічного веб-змісту, включаючи взаємодію з користувачем, анімацію та динамічну зміну вмісту сторінки."
            }
          ]
        }
      },
      {
        "list": {
          "title": "Фреймворки та бібліотеки для фронтенд-розробки:",
          "items": [
            {
              "id": 7205180664,
              "item": "React: Популярний JavaScript-фреймворк для побудови інтерфейсів користувача."
            },
            {
              "id": 2050184986,
              "item": "Angular: Фреймворк від Google для розробки односторінкових додатків."
            },
            {
              "id": 2600015337,
              "item": "Vue.js: Прогресивний JavaScript-фреймворк для створення інтерфейсів користувача та односторінкових додатків."
            }
          ]
        }
      },
      {
        "list": {
          "title": "Мови програмування для бекенд-розробки:",
          "items": [
            {
              "id": 5732152653,
              "item": "Node.js: JavaScript-обумовлене середовище виконання, яке дозволяє виконувати JavaScript на сервері."
            },
            {
              "id": 6437267828,
              "item": "Python: Високорівнева мова програмування, яка широко використовується для веб-розробки та інших цілей."
            },
            {
              "id": 5572479792,
              "item": "Ruby: Елегантна мова програмування, часто використовується з фреймворком Ruby on Rails для швидкої розробки."
            }
          ]
        }
      },
      {
        "list": {
          "title": "Бази даних та мови запитів:",
          "items": [
            {
              "id": 2427427690,
              "item": "SQL (Structured Query Language): SQL є стандартною мовою запитів, яка використовується для взаємодії з реляційними базами даних. Вона дозволяє створювати, модифікувати та керувати даними в таблицях. Деякі бази даних, які використовують SQL, включають MySQL, PostgreSQL, Microsoft SQL Server, Oracle, SQLite тощо. Основні операції SQL включають SELECT, INSERT, UPDATE, DELETE, JOIN тощо."
            },
            {
              "id": 8597978995,
              "item": "NoSQL (Not Only SQL): NoSQL є широкою категорією нереляційних баз даних, які використовуються для зберігання та витягування даних з великих обсягів неструктурованих даних. Деякі види NoSQL-баз даних включають документні бази даних (наприклад, MongoDB), ключ-значення (наприклад, Redis, Riak), колоночні бази даних (наприклад, Cassandra), бази даних графів (наприклад, Neo4j). NoSQL-бази даних найчастіше використовуються для веб-застосунків, які потребують масштабованості та високої продуктивності."
            },
            {
              "id": 5687295354,
              "item": "MongoDB: MongoDB є однією з найпопулярніших NoSQL-баз даних. Вона зберігає дані у вигляді документів JSON, що дозволяє гнучке та швидке зберігання даних. MongoDB дозволяє швидко масштабувати базу даних та працює добре для різноманітних типів даних."
            },
            {
              "id": 3372477616,
              "item": "Redis: Redis є ключ-значенням NoSQL-базою даних, яка використовується для зберігання даних у вигляді ключів, пов\"язаних зі значеннями. Вона часто використовується для кешування даних та покращення продуктивності додатків."
            }
          ]
        }
      },
      "Безпека та конфіденційність =>",
      {
        "list": {
          "title": "Криптографія:",
          "items": [
            {
              "id": 7504579404,
              "item": "Симетричне та асиметричне шифрування: Симетрична криптографія використовує один ключ для шифрування та розшифрування даних, тоді як асиметрична криптографія використовує пару ключів - публічний і приватний."
            },
            {
              "id": 7762322712,
              "item": "Цифрові підписи: Цифрові підписи використовуються для підтвердження автентичності повідомлень та забезпечення цілісності даних."
            },
            {
              "id": 9328953173,
              "item": "SSL/TLS протоколи: Протоколи шару транспортного забезпечення (SSL/TLS) використовуються для забезпечення безпеки та конфіденційності при передачі даних через Інтернет."
            },
            {
              "id": 9818860797,
              "item": "Хешування: Хеш-функції використовуються для створення унікального \"відбитка\" від даних, який може бути використаний для перевірки цілісності та автентичності даних."
            }
          ]
        }
      },
      {
        "list": {
          "title": "Безпека мережі:",
          "items": [
            {
              "id": 6451076421,
              "item": "Брандмауери: Брандмауери використовуються для контролю та фільтрації мережевого трафіку для захисту мережі від несанкціонованого доступу та шкідливих програм."
            },
            {
              "id": 316198832,
              "item": "Віртуальні приватні мережі (VPN): VPN забезпечують захищене з\"єднання та шифрування для передачі даних між вузлами мережі через публічну мережу, таку як Інтернет."
            },
            {
              "id": 8158902028,
              "item": "Моніторинг мережі: Інструменти моніторингу мережі дозволяють виявляти аномальний трафік, атаки та вразливості для вчасного реагування та запобігання можливим загрозам."
            }
          ]
        }
      },
      {
        "list": {
          "title": "Безпека веб-додатків:",
          "items": [
            {
              "id": 8241366681,
              "item": "SQL ін\"єкції: Це вразливість, коли зловмисники вставляють SQL-код у веб-форми для отримання несанкціонованого доступу до бази даних."
            },
            {
              "id": 9021085048,
              "item": "Міжсайтовий скриптінг (XSS): XSS атаки використовуються для впровадження зловмисного скрипту на веб-сторінки та отримання доступу до даних користувача."
            },
            {
              "id": 8942167011,
              "item": "Міжсайтова подвійка (XSRF/CSRF): Ця атака полягає в тому, що зловмисники змушують користувачів виконувати небезпечні дії на веб-сайті без їхньої згоди."
            },
            {
              "id": 6097783161,
              "item": "Заголовки безпеки: Встановлення правильних заголовків безпеки допомагає уникнути багатьох вразливостей, таких як атаки XSS і XSRF/CSRF."
            }
          ]
        }
      },
      "Стандарти та протоколи веб-розробки =>",
      {
        "list": {
          "title": "HTML5, CSS3, ECMAScript для сучасного веб-дизайну та функціональності:",
          "items": [
            {
              "id": 5250956555,
              "item": "HTML5 (HyperText Markup Language 5): Це остання версія мови розмітки HTML, яка визначає структуру та вміст веб-сторінок. HTML5 включає нові елементи, атрибути та API, які дозволяють створювати більш динамічні та багатофункціональні веб-додатки."
            },
            {
              "id": 5424809999,
              "item": "CSS3 (Cascading Style Sheets 3): Це остання версія мови стилів CSS, яка визначає зовнішній вигляд та оформлення веб-сторінок. CSS3 включає нові можливості, такі як анімації, тіні, градієнти та адаптивний дизайн, що дозволяє розробникам створювати більш привабливі та користувач-орієнтовані інтерфейси."
            },
            {
              "id": 2014085529,
              "item": "ECMAScript (JavaScript): Це стандартизована версія мови JavaScript, яка визначає базові функції, синтаксис та об\"єктну модель для розробки скриптів на стороні клієнта. Сучасні версії ECMAScript, такі як ES6 (ECMAScript 2015) і наступні, включають нові можливості, такі як класи, стрілкові функції, проміси, спред-оператори та інші, що полегшують розробку складних веб-додатків."
            }
          ]
        }
      },
      {
        "list": {
          "title": "RESTful API, GraphQL для створення ефективної взаємодії між клієнтом та сервером:",
          "items": [
            {
              "id": 1821342126,
              "item": "RESTful API (Representational State Transfer): Це архітектурний стиль для створення веб-служб, який використовує стандартні протоколи HTTP. RESTful API дозволяє взаємодіяти з сервером за допомогою стандартних HTTP-запитів, таких як GET, POST, PUT та DELETE, для отримання, створення, оновлення та видалення ресурсів."
            },
            {
              "id": 8468049418,
              "item": "GraphQL: Це мова запитів для вашого API, яка дозволяє клієнтам запитувати тільки ті дані, які їм потрібні. GraphQL дозволяє клієнтам описати структуру даних, яку вони хочуть отримати, і динамічно побудовує запити для отримання цих даних з сервера. Це зменшує кількість запитів до сервера та поліпшує продуктивність."
            }
          ]
        }
      },
      {
        "list": {
          "title": "Процеси версіонування, такі як Git, для спільної роботи над веб-проектами:",
          "items": [
            {
              "id": 6425739696,
              "item": "Git: Це розподілена система керування версіями, яка дозволяє команді розробників ефективно працювати разом над веб-проектами. Git дозволяє вам відстежувати зміни у коді, створювати гілки для розробки функцій, об\"єднувати зміни з різних гілок, вирішувати конфлікти та зберігати повну історію змін."
            },
            {
              "id": 7890890388,
              "item": "GitHub, GitLab, Bitbucket: Це платформи для спільної роботи над проектами з використанням Git. Вони надають інструменти для управління задачами, здійснення код-ревізій, зберігання коду, автоматизації процесу CI/CD (постійної інтеграції та постійного розгортання) та багато іншого."
            }
          ]
        }
      },
      "Інші важливі аспекти =>",
      {
        "list": {
          "title": "Розуміння кросбраузерної сумісності та респонсивного веб-дизайну:",
          "items": [
            {
              "id": 7133579960,
              "item": "Кросбраузерна сумісність - здатність веб-сайту або веб-додатку вірно відображатися та працювати на різних веб-браузерах, таких як Google Chrome, Mozilla Firefox, Safari, Microsoft Edge тощо."
            },
            {
              "id": 1638067283,
              "item": "Респонсивний веб-дизайн - підхід до веб-дизайну, який забезпечує автоматичне адаптування веб-сайту до різних розмірів екранів пристроїв, забезпечуючи оптимальний користувацький досвід як на комп\"ютерах, так і на мобільних пристроях."
            }
          ]
        }
      },
      {
        "list": {
          "title": "Знання про SEO (пошукову оптимізацію) для підвищення видимості веб-сайтів у пошукових системах:",
          "items": [
            {
              "id": 2102194197,
              "item": "Ключові слова та фрази - розуміння того, як вибирати та використовувати ключові слова, які відображають потреби вашої аудиторії."
            },
            {
              "id": 6520562053,
              "item": "Оптимізація вмісту - забезпечення, що контент на вашому веб-сайті є корисним та цікавим для вашої цільової аудиторії."
            },
            {
              "id": 3461474509,
              "item": "Зовнішні та внутрішні посилання - будування ефективної стратегії посилань, яка включає як зовнішні, так і внутрішні посилання, що вказують на ваш веб-сайт."
            }
          ]
        }
      },
      {
        "list": {
          "title": "Основи аналітики та веб-метрики для вимірювання та аналізу показників ефективності веб-сайтів:",
          "items": [
            {
              "id": 1356010881,
              "item": "Ключові показники ефективності (KPI) - ідентифікація основних метрик, які вимірюють успіх вашого веб-сайту, такі як кількість відвідувань, час перебування на сторінці, шляхи конверсії тощо."
            },
            {
              "id": 7991500293,
              "item": "Інструменти аналітики - використання платформ аналітики, таких як Google Analytics, для вимірювання та аналізу даних про відвідуваність вашого веб-сайту."
            },
            {
              "id": 7132606968,
              "item": "Оптимізація та вдосконалення - використання аналізу даних для вдосконалення веб-сайту та його вмісту, з метою покращення користувацького досвіду та досягнення більш високих показників ефективності."
            }
          ]
        }
      },
      {
        "list": {
          "title": "Основи командного рядка для VS Code: ",
          "items": [
            {
              "id": 3832068208,
              "item": "Відкриття командного рядка: Відкриття командного рядка в VS Code можна виконати за допомогою комбінації клавіш Ctrl + `` (на Windows) або Cmd + `` (на macOS)."
            },
            {
              "id": 6319183042,
              "item": "Виконання команд: Для виконання команд в командному рядку ви можете використовувати різні команди, такі як npm install, git commit, code ., тощо."
            },
            {
              "id": 3497941363,
              "item": "Управління файлами та каталогами: Ви можете переглядати, створювати, видаляти та переміщати файли та каталоги за допомогою команд, таких як ls (для перегляду списку файлів), mkdir (для створення каталогу), rm (для видалення файлу) тощо."
            },
            {
              "id": 8941308235,
              "item": "Робота з Git: VS Code має вбудовану підтримку Git. Ви можете використовувати команди, такі як git add, git commit, git push, git pull для управління версіями вашого коду."
            },
            {
              "id": 3209787233,
              "item": "Запуск тестів та програм: Ви можете запускати тести та програми безпосередньо з командного рядка за допомогою команд, таких як npm test, node, тощо."
            },
            {
              "id": 5353063141,
              "item": "Установка плагінів та розширень: Деякі плагіни та розширення можна управляти через командний рядок VS Code, наприклад, code --install-extension <назва розширення>."
            }
          ]
        }
      },
      {
        "list": {
          "title": "Команди для роботи з VS Code: VS Code надає деякі вбудовані команди для управління редактором:",
          "items": [
            {
              "id": 5044076187,
              "item": "Збереження файлу: Ctrl + S або Cmd + S - ця комбінація клавіш дозволяє зберегти поточний файл."
            },
            {
              "id": 8002773028,
              "item": "Відміна дії: Ctrl + Z або Cmd + Z - ця комбінація клавіш дозволяє скасувати останню дію."
            },
            {
              "id": 6489419241,
              "item": "Повтор останньої дії: Ctrl + Y або Cmd + Shift + Z - ця комбінація клавіш дозволяє повторити останню скасовану дію."
            },
            {
              "id": 6038396467,
              "item": "Відкриття нового вікна: Ctrl + Shift + N або Cmd + Shift + N - ця комбінація клавіш відкриває нове вікно VS Code."
            },
            {
              "id": 4107829658,
              "item": "Відкриття нового файлу: Ctrl + N або Cmd + N - ця комбінація клавіш дозволяє вам відкрити новий файл."
            },
            {
              "id": 6022004239,
              "item": "Закриття поточного вікна/вкладки: Ctrl + W або Cmd + W - ця комбінація клавіш дозволяє вам закрити поточне вікно або вкладку."
            },
            {
              "id": 4307321321,
              "item": "Перехід до визначення: Ctrl + клік мишею або Cmd + клік мишею - ця комбінація дозволяє вам перейти до визначення функції або змінної в коді."
            },
            {
              "id": 3546772209,
              "item": "Закоментувати код: Ctrl + / або Cmd + / - ця комбінація дозволяє вам закоментувати виділений код або розкоментувати вже закоментований код."
            },
            {
              "id": 5329437694,
              "item": "Пошук та заміна: Ctrl + F або Cmd + F - ця комбінація дозволяє вам здійснювати пошук у поточному файлі."
            },
            {
              "id": 6094052508,
              "item": "Перехід до файлу: Ctrl + P або Cmd + P - ця комбінація дозволяє вам швидко перейти до конкретного файлу у вашому проекті."
            }
          ]
        }
      }
    ]
  },
  "js_general": { "subtitle": "Загальні поняття про Javascript", "content": [] },

  "js_variables": {
    "subtitle": "Змінні (Variables)",
    "content": []
  },
  "js_types_of_data": {
    "subtitle": "Типи даних (Type of data)",
    "content": []
  },
  "js_operators": {
    "subtitle": "Оператори (Operators)",
    "content": []
  },
  "js_string": {
    "subtitle": "Рядки та їх методи (String)",
    "content": []
  },
  "js_string_templates": {
    "subtitle": "Рядкові шаблони (String templates)",
    "content": []
  },
  "js_number": {
    "subtitle": "Числа та їх методи (Number)",
    "content": []
  },
  "js_date": {
    "subtitle": "Дати (Date)",
    "content": []
  },
  "js_object": {
    "subtitle": "Об\"єкти та їх методи (Object)",
    "content": []
  },
  "js_object_math": {
    "subtitle": "Об\"єкт Math",
    "content": []
  },
  "js_array": {
    "subtitle": "Масиви та їх методи (Array)",
    "content": []
  },
  "js_function": {
    "subtitle": "Функції (Function)",
    "content": []
  },
  "js_scope": {
    "subtitle": "Область видимості (Scope)",
    "content": []
  },
  "js_condition": {
    "subtitle": "Умови (Condition)",
    "content": []
  },
  "js_loops": {
    "subtitle": "Цикли (Loops)",
    "content": []
  },
  "js_dom": {
    "subtitle": "DOM (Document Object Model)",
    "content": []
  },
  "js_events": {
    "subtitle": "Обробка подій (Events)",
    "content": []
  },
  "js_callbacks": {
    "subtitle": "Колбеки (Callbacks)",
    "content": []
  },
  "js_async": {
    "subtitle": "Async/await",
    "content": []
  },
  "js_promises": {
    "subtitle": "Проміси (Promises)",
    "content": []
  },
  "js_prototype": {
    "subtitle": "Прототипи (Prototype)",
    "content": []
  },
  "js_ajax": {
    "subtitle": "AJAX",
    "content": []
  },
  "js_json": {
    "subtitle": "JSON",
    "content": []
  },
  "js_storage": {
    "subtitle": "LocalStorage та SessionStorage",
    "content": []
  },
  "js_rest": {
    "subtitle": "REST API",
    "content": []
  }
}
